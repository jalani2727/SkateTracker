{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","name","value","type","checked","activeItem","objectSpread","state","defineProperty","setState","_this2","_this$props","toggle","onSave","react_default","a","createElement","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","title","onChange","placeholder","description","check","completed","ModalFooter","Button","color","onClick","Component","App","refreshList","axios","get","then","res","trickList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","key","id","concat","editItem","handleDelete","modal","handleSubmit","put","post","delete","createItem","Modal_CustomModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eec1694c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// handling functions like added and editing tricks \nexport default class CustomModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeItem: this.props.activeItem\n        };\n    }\n// from DC notes: Helper functions should be named using an underscore.\n    handleChange = e => {\n        let { name, value } = e.target;\n        if (e.target.type === \"checkbox\") {\n            value = e.target.checked;\n        }\n        const activeItem = { ...this.state.activeItem, [name]: value };\n        this.setState({activeItem});\n    };\n    render() {\n        const { toggle, onSave } = this.props;\n        return (\n            <Modal isOpen={true} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Trick</ModalHeader>\n            <ModalBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"title\">Name</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"title\"\n                    value={this.state.activeItem.title}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Trick Name\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"description\">Description</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"description\"\n                    value={this.state.activeItem.description}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Trick description\"\n                  />\n                </FormGroup>\n                <FormGroup check>\n                  <Label for=\"completed\">\n                    <Input\n                      type=\"checkbox\"\n                      name=\"completed\"\n                      checked={this.state.activeItem.completed}\n                      onChange={this.handleChange}\n                    />\n                    Completed\n                  </Label>\n                </FormGroup>\n              </Form>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n                Save\n              </Button>\n            </ModalFooter>\n            </Modal>\n        );\n    }\n}","// frontend/src/App.js\n\nimport React, { Component } from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\n\n\n\n\n  \n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      viewCompleted: false,\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false\n      },\n      trickList: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshList();\n  }\n  // refreshList() is reusable that is called each time an API request is completed. It updates the Todo list to display the most recent list of added items.\n  refreshList = () => {\n    axios.get(\"http://localhost:8000/api/tricks/\")\n    .then(res => this.setState({trickList: res.data}))\n    .catch(err => console.log(err));\n  };\n  displayCompleted = status => {\n    if (status) {\n      return this.setState({viewCompleted: true})\n    }\n    return this.setState({viewCompleted: false});\n  };\n\n  renderTabList = () => {\n    return (\n      <div className=\"my-5 tab-list\">\n        <span\n          onClick={() => this.displayCompleted(true)}\n          className={this.state.viewCompleted ? \"active\" : \"\"}\n        >\n          Performed\n        </span>\n        <span\n          onClick={() => this.displayCompleted(false)}\n          className={this.state.viewCompleted ? \"\" : \"active\"}\n        >\n          Yet to Perform\n        </span>\n      </div>\n    );\n  };\n  renderItems = () => {\n    const { viewCompleted } = this.state;\n    const newItems = this.state.trickList.filter(\n      item => item.completed === viewCompleted\n    );\n    return newItems.map(item => (\n      <li\n        key={item.id}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        <span\n          className={`trick-title mr-2 ${\n            this.state.viewCompleted ? \"completed-trick\" : \"\"\n          }`}\n          title={item.description}\n        >\n          {item.title}\n        </span>\n        <span>\n          <button\n            onClick={() => this.editItem(item)}\n            className=\"btn btn-secondary mr-2\"\n          >\n            {\" \"}\n            Edit{\" \"}\n          </button>\n          <button\n            onClick={() => this.handleDelete(item)}\n            className=\"btn btn-danger\"\n          >\n            Delete{\" \"}\n          </button>\n        </span>\n      </li>\n    ));\n  };\n  toggle = () => {\n    this.setState({ modal: !this.state.modal });\n  };\n\n  // handleSubmit() takes care of both the create and update operations. If the item passed as the parameter doesn’t have an id, then it has probably not been created, so the function creates it.\n  handleSubmit = item => {\n    this.toggle();\n    if (item.id) {\n      axios\n        .put(`http://localhost:8000/api/tricks/${item.id}/`, item)\n        .then(res => this.refreshList());\n      return;\n    }\n    axios\n      .post(\"http://localhost:8000/api/tricks/\", item)\n      .then(res => this.refreshList());\n  };\n  handleDelete = item => {\n    axios\n      .delete(`http://localhost:8000/api/tricks/${item.id}`)\n      .then(res => this.refreshList());\n  };\n  createItem = () => {\n    const item = { title: \"\", description: \"\", completed: false };\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n  editItem = item => {\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n\n  render() {\n    \n    return (\n      <main className=\"content\">\n        <h1 className=\"text-white text-center my-4\">SkateTracker</h1>\n        <div className=\"row \">\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n            <div className=\"card p-3\">\n              <div className=\"\">\n                <button onClick={this.createItem} className=\"btn btn-primary\">New Trick</button>\n              </div>\n              {this.renderTabList()}\n              <ul className=\"list-group list-group-flush\">\n                {this.renderItems()}\n              </ul>\n            </div>\n          </div>\n        </div>\n        {this.state.modal ? (\n          <Modal activeItem={this.state.activeItem} toggle={this.toggle} onSave={this.handleSubmit}/>\n        ) : null}\n      </main>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}